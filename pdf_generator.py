"""
PDF Generation Module for StudyMate.ai
Handles PDF creation for QuickNotes and other content
"""

import io
import re
from datetime import datetime
from typing import Optional

from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.colors import HexColor


class PDFGenerator:
    """Generates PDF documents for StudyMate.ai content"""
    
    def __init__(self):
        """Initialize PDF generator with default settings"""
        self.page_size = A4
        self.margin = 0.75 * inch
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
    
    def _setup_custom_styles(self):
        """Setup custom paragraph styles"""
        # Title style
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Title'],
            fontSize=18,
            spaceAfter=20,
            textColor=HexColor('#2E3440'),
            alignment=1  # Center alignment
        ))
        
        # Subtitle style
        self.styles.add(ParagraphStyle(
            name='CustomSubtitle',
            parent=self.styles['Heading2'],
            fontSize=14,
            spaceAfter=12,
            textColor=HexColor('#5E81AC'),
            leftIndent=0
        ))
        
        # Body text style
        self.styles.add(ParagraphStyle(
            name='CustomBody',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=8,
            textColor=HexColor('#3B4252'),
            leftIndent=0,
            rightIndent=0
        ))
        
        # Bullet point style
        self.styles.add(ParagraphStyle(
            name='CustomBullet',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=6,
            textColor=HexColor('#3B4252'),
            leftIndent=20,
            bulletIndent=10
        ))
    
    def generate_quicknotes_pdf(self, content: str, learning_mode: str = "Intermediate", 
                               document_title: str = "QuickNotes") -> bytes:
        """
        Generate PDF for QuickNotes content
        
        Args:
            content: QuickNotes text content
            learning_mode: Learning difficulty level
            document_title: Title for the document
            
        Returns:
            PDF content as bytes
        """
        # Create PDF buffer
        buffer = io.BytesIO()
        
        # Create document
        doc = SimpleDocTemplate(
            buffer,
            pagesize=self.page_size,
            rightMargin=self.margin,
            leftMargin=self.margin,
            topMargin=self.margin,
            bottomMargin=self.margin
        )
        
        # Build content
        story = []
        
        # Add title
        title = f"📝 {document_title}"
        story.append(Paragraph(title, self.styles['CustomTitle']))
        story.append(Spacer(1, 12))
        
        # Add metadata
        timestamp = datetime.now().strftime("%B %d, %Y at %I:%M %p")
        metadata = f"Generated on {timestamp} | Learning Level: {learning_mode}"
        story.append(Paragraph(metadata, self.styles['CustomSubtitle']))
        story.append(Spacer(1, 20))
        
        # Process and add content
        processed_content = self._process_content(content)
        for item in processed_content:
            story.append(item)
        
        # Add footer
        story.append(Spacer(1, 30))
        footer_text = "Generated by StudyMate.ai - Your AI-Powered Study Companion"
        footer_style = ParagraphStyle(
            name='Footer',
            parent=self.styles['Normal'],
            fontSize=9,
            textColor=HexColor('#8FBCBB'),
            alignment=1  # Center alignment
        )
        story.append(Paragraph(footer_text, footer_style))
        
        # Build PDF
        doc.build(story)
        
        # Get PDF bytes
        buffer.seek(0)
        pdf_bytes = buffer.getvalue()
        buffer.close()
        
        return pdf_bytes
    
    def _process_content(self, content: str) -> list:
        """
        Process content text into PDF elements
        
        Args:
            content: Raw text content
            
        Returns:
            List of PDF elements (Paragraphs, Spacers)
        """
        elements = []
        
        # Clean content
        content = self._clean_html_tags(content)
        
        # Split into lines
        lines = content.split('\n')
        
        for line in lines:
            line = line.strip()
            if not line:
                elements.append(Spacer(1, 6))
                continue
            
            # Check if it's a bullet point
            if line.startswith('•') or line.startswith('-') or line.startswith('*'):
                # Remove bullet character and clean
                bullet_text = line[1:].strip()
                if bullet_text:
                    elements.append(Paragraph(f"• {bullet_text}", self.styles['CustomBullet']))
            
            # Check if it's a heading (contains ### or ##)
            elif line.startswith('###'):
                heading_text = line.replace('###', '').strip()
                if heading_text:
                    elements.append(Spacer(1, 12))
                    elements.append(Paragraph(heading_text, self.styles['CustomSubtitle']))
                    elements.append(Spacer(1, 6))
            
            elif line.startswith('##'):
                heading_text = line.replace('##', '').strip()
                if heading_text:
                    elements.append(Spacer(1, 15))
                    elements.append(Paragraph(heading_text, self.styles['Heading2']))
                    elements.append(Spacer(1, 8))
            
            # Regular paragraph
            else:
                elements.append(Paragraph(line, self.styles['CustomBody']))
        
        return elements
    
    def _clean_html_tags(self, text: str) -> str:
        """
        Remove HTML tags from text
        
        Args:
            text: Text with potential HTML tags
            
        Returns:
            Clean text without HTML tags
        """
        # Remove HTML tags
        clean_text = re.sub('<[^<]+?>', '', text)
        
        # Replace HTML entities
        clean_text = clean_text.replace('&nbsp;', ' ')
        clean_text = clean_text.replace('&amp;', '&')
        clean_text = clean_text.replace('&lt;', '<')
        clean_text = clean_text.replace('&gt;', '>')
        clean_text = clean_text.replace('&quot;', '"')
        
        return clean_text
    
    def generate_notes_pdf(self, notes_list: list, title: str = "Personal Notes") -> bytes:
        """
        Generate PDF for personal notes
        
        Args:
            notes_list: List of note strings
            title: Document title
            
        Returns:
            PDF content as bytes
        """
        # Create PDF buffer
        buffer = io.BytesIO()
        
        # Create document
        doc = SimpleDocTemplate(
            buffer,
            pagesize=self.page_size,
            rightMargin=self.margin,
            leftMargin=self.margin,
            topMargin=self.margin,
            bottomMargin=self.margin
        )
        
        # Build content
        story = []
        
        # Add title
        story.append(Paragraph(f"📋 {title}", self.styles['CustomTitle']))
        story.append(Spacer(1, 12))
        
        # Add timestamp
        timestamp = datetime.now().strftime("%B %d, %Y at %I:%M %p")
        story.append(Paragraph(f"Generated on {timestamp}", self.styles['CustomSubtitle']))
        story.append(Spacer(1, 20))
        
        # Add notes
        for i, note in enumerate(notes_list, 1):
            if note.strip():
                # Add note number
                note_header = f"Note {i}:"
                story.append(Paragraph(note_header, self.styles['CustomSubtitle']))
                story.append(Spacer(1, 6))
                
                # Add note content
                clean_note = self._clean_html_tags(note)
                story.append(Paragraph(clean_note, self.styles['CustomBody']))
                story.append(Spacer(1, 15))
        
        # Add footer
        story.append(Spacer(1, 30))
        footer_text = "Generated by StudyMate.ai - Your AI-Powered Study Companion"
        footer_style = ParagraphStyle(
            name='Footer',
            parent=self.styles['Normal'],
            fontSize=9,
            textColor=HexColor('#8FBCBB'),
            alignment=1
        )
        story.append(Paragraph(footer_text, footer_style))
        
        # Build PDF
        doc.build(story)
        
        # Get PDF bytes
        buffer.seek(0)
        pdf_bytes = buffer.getvalue()
        buffer.close()
        
        return pdf_bytes


# Global PDF generator instance
pdf_generator = PDFGenerator()
